{"version":3,"sources":["api/index.js","App.js","serviceWorker.js","index.js"],"names":["socket","process","PORT","window","location","protocol","WebSocket","host","App","props","state","chatHistory","message","username","lastMessage","React","createRef","usernameRef","callBack","msg","console","log","data","JSON","parse","setState","value","incoming","onopen","onmessage","onclose","ev","onerror","error","this","scrollTo","current","offsetTop","send","sendMsg","stringify","e","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","ref","onClick","map","index","key","onKeyUp","target","handleSendMessage","document","getElementById","aria-hidden","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.01a48d0b.chunk.js","sourcesContent":["const port = process.env.PORT || 8085\r\n\r\n// const socket = new WebSocket(`wss://chat-app0773.herokuapp.com/:${port}/ws`);\r\n// const socket = new WebSocket(`ws://localhost:${port}/ws`);\r\n\r\n// console.log(\"client port : \", port)\r\n// console.log(\"location.protocol: \", window.location.protocol )\r\nlet socket\r\nif(window.location.protocol !== 'https:')\r\n  {\r\n    socket = new WebSocket(`ws://${window.location.host}/ws`);\r\n  }\r\nelse\r\n  {\r\n    socket = new WebSocket(`wss://${window.location.host}/ws`);\r\n  }\r\n//wss https\r\n//ws http\r\n// console.log(\"location host: \", window.location.host)\r\n// console.log(\"location host: \", window.location.port)\r\n// console.log(\"location host: \", window.location.hostname)\r\nlet connect = callBack => {\r\n  console.log(\"Connecting...\");\r\n\r\n  socket.onopen = () => {\r\n    console.log(\"Successfully Connected\");\r\n  };\r\n  // receive message from server to client\r\n  socket.onmessage = msg => {\r\n    console.log(\"onmessage\", msg);\r\n    callBack(msg);\r\n  };\r\n  socket.onclose = ev => {\r\n    console.log(\"Socket Closed Connection \", ev);\r\n  };\r\n  socket.onerror = error => {\r\n    console.log(\"Socket Error: \", error);\r\n  }\r\n};\r\n\r\n// send message from client to server\r\nlet sendMsg = msg => {\r\n  console.log('sending message: ', msg);\r\n  socket.send(msg);\r\n};\r\n\r\nexport {connect, sendMsg}","import React from 'react';\nimport './Materia.css';\nimport './App.css'\nimport {connect, sendMsg} from \"./api\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatHistory: [],\n      message: \"Hello\",\n      username: \"anonymous\"\n    }\n    this.lastMessage = React.createRef()\n    this.usernameRef = React.createRef()\n  }\n\n  componentDidMount() {\n    connect(msg => {\n      console.log(\"Connected\");\n      console.log(\"msg.data:\", msg.data)\n      const {message, username} = JSON.parse(msg.data)\n      this.setState({\n        chatHistory: [...this.state.chatHistory, {\n          value: message,\n          incoming: true,\n          username: username\n        }]\n      });\n\n    });\n  }\n\n\n  handleSendMessage(msg) {\n    try {\n      this.setState({\n        chatHistory: [...this.state.chatHistory, {\n          value: msg,\n          incoming: false,\n          username: this.state.username\n        }]\n      });\n      window.scrollTo(0, this.lastMessage.current.offsetTop)\n      sendMsg(JSON.stringify({message: msg, username: this.state.username}))\n    } catch (e) {\n      console.log('error attempting to send a message')\n    }\n  }\n\n  render() {\n    const {message, chatHistory} = this.state;\n    let inRow = true;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor03\"\n                  aria-controls=\"navbarColor03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarColor03\">\n            <div className=\"userName\">\n\n              <input className=\"form-control mr-sm-2\" type=\"text\"\n                     placeholder=\"username\"\n                     ref={this.usernameRef}/>\n              <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"button\"\n                      onClick={() => {\n                        this.setState({\n                          username: this.usernameRef.current.value\n                        }, () => {\n                          console.log('username:', this.state.username)\n                        })\n                      }}>Enter\n              </button>\n            </div>\n          </div>\n        </nav>\n        <div className='container wrapper mb-5'>\n          {chatHistory.map((msg, index) => {\n            if (msg.incoming) {\n              return (\n                <div className=\"col-lg-4\" key={index}>\n                  <div className=\"chat-bubble chat-bubble--left\">\n                    {msg.value}\n                  </div>\n                  <p className='user-name'>\n                    {msg.username}\n                  </p>\n                </div>\n              )\n            }\n            else {\n              return (\n                <div className=\"col-lg-4 offset-lg-9\" key={index}>\n                  <div className=\"chat-bubble chat-bubble--right\">\n                    {msg.value}\n                  </div>\n                </div>\n              )\n            }\n          })}\n        </div>\n        <div className='footer' ref={this.lastMessage}>\n          <input id='message-input' className=\"form-control ml-sm-3\" type=\"text\" placeholder=\"write message...\"\n                 onKeyUp={(e) => {\n                   if (e.key === 'Enter') {\n                     console.log('your msg:', e.target.value)\n                     this.handleSendMessage(e.target.value)\n                     e.target.value = \"\"\n                   }\n                 }}/>\n          <button className='btn btn-secondary' onClick={() => {\n            this.handleSendMessage(document.getElementById('message-input').value)\n            document.getElementById('message-input').value = \"\"\n          }}>\n            <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}